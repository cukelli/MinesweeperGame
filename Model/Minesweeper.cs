using System;

namespace MinesweeprGame.Model
{
    internal class Minesweeper
    {

        private int[,] matrix = new int[8, 8];
        private int[,] solutionMatrix = new int[8, 8];
        private int[] currentPosition = new int[2] { 0, 0 }; 
        char[] characters = new char[8] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };
        private int moves;
        public int mines { get; set; }
        public int lives { get; set; }


        public int[] GetPosition()
        {
            return this.currentPosition;
        }

        public int[,] getMatrix()
        {
            return this.matrix;
        }

        public int[,] GetSolutionMatrix()
        {
            return this.solutionMatrix;
        }
        public Minesweeper()
        {

            this.lives = 5;
            this.moves = 0;
            this.mines = 5;

            for (int i = 0; i < this.matrix.GetLength(0); i++)
            {

                for (int j = 0; j < this.matrix.GetLength(1); j++)
                {
                    this.matrix[i, j] = 0;
                    this.solutionMatrix[i, j] = 0;
                }

            }

            this.GenerateMines();
        }

        public void PrintMatrix()
        {

            for (int i = 0; i < this.matrix.GetLength(0) + 1; i++)
            {

                if (i < this.matrix.GetLength(0))
                {

                    Console.Write(characters[i] + " ");


                    for (int j = 0; j < this.matrix.GetLength(1); j++)
                    {
                        Console.Write(this.matrix[i, j] + " ");


                    }
                    Console.WriteLine();


                }

                else
                {
                    Console.Write("  ");
                    foreach (int k in new int[8] { 0, 1, 2, 3, 4, 5, 6, 7 })
                    {

                        Console.Write(k + " ");
                    }
                }

            }

            Console.WriteLine();


        }

        public void StartGame()
        {
            Console.WriteLine("Game can start. \nAt the start of the game you have 5 lives.");
            Console.WriteLine("First step should be position at one of the four sides. \nGoal is to reach opposite side (if you start from the corner you need to reach one of two opposite sides) of the table.");
            Console.WriteLine("To be able to move top, bottom, left and right you should provide info about your step like example below:");
            Console.WriteLine("LEFT (<-), RIGHT (->), TOP (↑) , BOTTOM (↓)");
            Console.WriteLine("If you step on a mine, you lose one life. Field becomes '-1' when it has a mine and you have hit it.");
            Console.WriteLine("If you step on a correct field, it will become '1'.");
            Console.WriteLine("If you lose all your lives, game is over. First step will be generated by computer. Good luck! \n ");

            this.PrintMatrix();
            this.GenerateFirstPosition();

        }

        private void GenerateFirstPosition()
        {

            Random random = new Random();
            int firstRandomNumber = random.Next(0, 8);
            int secondRandomNumber;

            if (firstRandomNumber == 0 || firstRandomNumber == 7)
            {
                secondRandomNumber = random.Next(0, 8);
            }
            else
            {
                secondRandomNumber = random.Next(0, 2) == 0 ? 0 : 7;

            }
            this.currentPosition[0] = firstRandomNumber;
            this.currentPosition[1] = secondRandomNumber;
            checkAbilityToPlay("FIRST");

        }

        private bool checkAbilityToPlay(string step)
        {
            int currentYAsis = this.currentPosition[0];
            int currentXAsis = this.currentPosition[1];
            int[] newPosition = new int[2];
            switch (step)
            {
                case "LEFT":
                    if ((currentXAsis - 1) < 0)
                    {
                        Console.WriteLine("Please hit valid field!");
                        return true;

                    }
                    newPosition[0] = currentYAsis;
                    newPosition[1] = currentXAsis - 1;
                    break;
                case "RIGHT":
                    if ((currentXAsis + 1) > 7)
                    {
                        Console.WriteLine("Please hit valid field!");
                        return true;

                    }
                    newPosition[0] = currentYAsis;
                    newPosition[1] = currentXAsis + 1;
                    break;
                case "TOP":
                    if ((currentYAsis - 1) < 0)
                    {
                        Console.WriteLine("Please hit valid field!");
                        return true;

                    }
                    newPosition[0] = currentYAsis - 1;
                    newPosition[1] = currentXAsis;
                    break;
                case "BOTTOM":
                    if ((currentYAsis + 1) > 7)
                    {
                        Console.WriteLine("Please hit valid field!");
                        return true;

                    }
                    newPosition[0] = currentYAsis + 1;
                    newPosition[1] = currentXAsis;
                    break;

                case "FIRST":
                    newPosition = this.currentPosition;

                    if ((currentYAsis == 0 && currentXAsis == 0) || (currentYAsis == 7 && currentXAsis == 0))
                    {
                        for (int i = 0; i < 8; i++)
                        {
                            this.solutionMatrix[i, 7] = 1;
                        }
                    }
                    else if ((currentYAsis == 0 && currentXAsis == 7) || (currentYAsis == 7 && currentXAsis == 7))
                    {
                        for (int i = 0; i < 8; i++)
                        {
                            this.solutionMatrix[i, 0] = 1;

                        }

                    }
                    else
                    {
                        if (currentYAsis == 0)
                        {
                            for (int i = 0; i < 8; i++)
                            {

                                this.solutionMatrix[7, i] = 1;
                            }
                        }
                        else if (currentYAsis == 7)
                        {
                            for (int i = 0; i < 8; i++)
                            {
                                this.solutionMatrix[0, i] = 1;
                            }
                        }

                        if (currentXAsis == 0)
                        {

                            for (int i = 0; i < 8; i++)
                            {

                                this.solutionMatrix[i, 7] = 1;
                            }

                        }
                        else if (currentXAsis == 7)
                        {

                            for (int i = 0; i < 8; i++)
                            {
                                this.solutionMatrix[i, 0] = 1;
                            }
                        }
                    }
                    break;
                case "END":
                    return false;
                default:
                    Console.WriteLine("Please enter valid step!");
                    return true;
            }


            Console.WriteLine("You hit: " + characters[newPosition[0]] + newPosition[1]);

            if (this.solutionMatrix[newPosition[0], newPosition[1]] == 1)
            {
                Console.WriteLine("You won! Number of moves you have made: "+this.moves);
                return false;

            }


            if (this.solutionMatrix[newPosition[0], newPosition[1]] == 1)
            {
                Console.WriteLine("You alredy hit: " + characters[newPosition[0]] + newPosition[1]);
                Console.WriteLine("Please try again!");
                return true;

            }
            this.moves += 1;
            if (this.solutionMatrix[newPosition[0], newPosition[1]] == -1)
            {

                Console.WriteLine("You hit the mine!");
                if (this.lives == 1)
                {
                    Console.WriteLine("Game over!");
                    return false;
                }
                this.matrix[newPosition[0], newPosition[1]] = 1;
                this.solutionMatrix[newPosition[0], newPosition[1]] = 0;
                this.currentPosition[0] = newPosition[0];
                this.currentPosition[1] = newPosition[1];
                this.lives--;

                Console.WriteLine("Lives left: !"+this.lives);

                return true;
            }

            this.matrix[newPosition[0], newPosition[1]] = 1;
            this.currentPosition[0] = newPosition[0];
            this.currentPosition[1] = newPosition[1];
            PrintMatrix();
            return true;

        }

        public void PlayGame()

        {
            bool flag = true;
            while (flag)
            {
                Console.WriteLine("Enter your step:");
                string step = Console.ReadLine();
                flag = this.checkAbilityToPlay(step);
            }

        }

        private void GenerateMines()
        {
            Random random = new Random();
            Console.WriteLine("mines number: " + this.mines);

            for (int i = 0; i < this.mines; i++)
            {
                int xAsisMine = random.Next(1, 7);
                int yAsisMine = random.Next(1, 7);

                if (this.solutionMatrix[yAsisMine, xAsisMine] == -1)
                {
                    if (xAsisMine < 7)
                    {
                        xAsisMine = xAsisMine + 1;
                    }
                    else
                    {
                        xAsisMine = xAsisMine - 1;

                    }

                }
                this.solutionMatrix[yAsisMine, xAsisMine] = -1;

            }
        }


    }
}
